# Channel create/join chain support

The channel commands are
* create - create a channel in the `orderer` and get back a genesis block for the channel
* join - use genesis block from create command to issue a join request to a Peer

```
NOTE - The main JIRA items for the work are
   https://jira.hyperledger.org/browse/FAB-1022
   https://jira.hyperledger.org/browse/FAB-1547

The commands are work in progress. In particular, there will be more configuration parameters to the commands. Some relevant JIRA items
    https://jira.hyperledger.org/browse/FAB-1642
    https://jira.hyperledger.org/browse/FAB-1639
    https://jira.hyperledger.org/browse/FAB-1580
```

# Using Docker
```
NOTE - till latest images are published you may have to use the Vagrant environment to generate docker images
    make peer-docker
    make orderer-docker
```

## Create a channel
_Bring up peer and orderer_
```
cd docs
docker-compose -f docker-compose-join.yml up
```

`docker ps` should show containers `orderer` and `peer0` running.

_Ask orderer to create a chain_
Start the CLI container.
```
docker-compose -f docker-compose-join.yml run cli
```
In the above shell execute the create command
```
CORE_PEER_COMMITTER_LEDGER_ORDERER=orderer:5005 peer channel create -c myc1 
```
This will the channel block file `myc1.block` to issue join commands with.

## Join a channel
Execute the join command to peer0 in the CLI container.

```
CORE_PEER_COMMITTER_LEDGER_ORDERER=orderer:5005 CORE_PEER_ADDRESS=peer0:7051 peer channel join -b myc1.block
```

## Use the channel to deploy and invoke chaincodes
Run CLI in a container
```
docker-compose -f docker-compose-join.yml run cli
```
Run the deploy command 
```
CORE_PEER_ADDRESS=peer0:7051 CORE_PEER_COMMITTER_LEDGER_ORDERER=orderer:5005 peer chaincode deploy -C myc -n mycc -p github.com/hyperledger/fabric/examples/chaincode/go/chaincode_example02 -c '{"Args":["init","a","100","b","200"]}'
```

Run the invoke command 
```
CORE_PEER_ADDRESS=peer0:7051 CORE_PEER_COMMITTER_LEDGER_ORDERER=orderer:5005 peer chaincode invoke -C myc -n mycc -c '{"Args":["invoke","a","b","10"]}'
```

Run the query command 
```
CORE_PEER_ADDRESS=peer0:7051 CORE_PEER_COMMITTER_LEDGER_ORDERER=orderer:5005 peer chaincode query -C myc -n mycc -c '{"Args":["query","a"]}'
```

# Using Vagrant

## Create a channel
_Vagrant window 1 - start orderer_

```
cd orderer
ORDERER_GENERAL_LOGLEVEL=debug ./orderer
```
_Vagrant window 2 - ask orderer to create a chain_

```
cd peer
peer channel create -c mychannel
```

On successful creation, a genesis block mychannel.block is saved in the same directory.

## Join a channel

_Vagrant window 3 - start the peer in a "chainless" mode_

```
#NOTE - clear the environment with rm -rf /var/hyperledger/* after updating fabric to get channel support. 

cd peer
peer node start --peer-defaultchain=false
```

```
"--peer-defaultchain=true" is the default. It allow users continue to work with the default **TEST_CHAINID** without having to join a chain. 

"--peer-defaultchain=false" starts the peer with only the channels that were joined by the peer. If the peer never joined a channel it would start up without any channels. In particular, it does not have the default **TEST_CHAINID** support. 

To join channels, a peer MUST be started with the "--peer-defaultchain=false" option. 
```
_Vagrant window 4 - peer to join a channel_

```
cd peer
peer channel join -b myc1.block
```

where myc1.block is the block that was received from the `orderer` from the create channel command.

## Use the channel to deploy and invoke chaincodes

_Vagrant window 2 - deploy a chaincode to myc1_

```
cd peer
peer chaincode deploy -C myc1 -n mycc -p github.com/hyperledger/fabric/examples/chaincode/go/chaincode_example02 -c '{"Args":["init","a","100","b","200"]}'
```

Note the use of `-C myc1` to target the chaincode deployment against the `myc1` channel.

Wait for the deploy to get committed (e.g., by default the `solo orderer` can take upto 10 seconds to sends a batch of transactions to be committed.)

_Vagrant window 2 - invoke chaincode_

```
 cd peer
 peer chaincode query -C myc1 -n mycc -c '{"Args":["invoke","a","b","10"]}'
```


_Vagrant window 2 - query chaincode_

```
 cd peer
 peer chaincode query -C myc1 -n mycc -c '{"Args":["query","a"]}'
```
